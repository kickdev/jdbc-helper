#summary Examples using JdbcHelper

=Introduction=
JdbcHelper has a simple API which consists of only a few number of classes and interfaces. The main class that you will be using is the jdbchelper.JdbcHelper class. This class is well documented using javadocs, so checking that documentation for each method of the class is a good idea.

=Creating a JdbcHelper Instance=

JdbcHelper class has a single constructor which accepts a javax.sql.DataSource implementation. A DataSource instance can be created in several ways. 
 * It can be obtained from your application server by making a JNDI lookup or by asking the appserver to inject it in one of your classes
 * You may create an instance of your Database vendors implementations such as `com.mysql.jdbc.jdbc2.optional.MysqlDataSource` or `oracle.jdbc.pool.OracleDataSource`
 * You can use `jdbchelper.SimpleDataSource` class
 * You write your own implementation :)

An example of a JNDI lookup for an Oracle DataSource in an application server environment is as follows:

{{{
javax.naming.InitialContext ic               = new javax.naming.InitialContext();
oracle.jdbc.pool.OracleDataSource dataSource = (oracle.jdbc.pool.OracleDataSource)ic.lookup("jdbc/pool/OracleDS");
}}}

Once you have an instance of DataSource, than you can create a JdbcHelper:
{{{
JdbcHelper jdbc = new JdbcHelper(dataSource);
}}}

JdbcHelper class holds a reference to the dataSource implementation and manages getting a connection from the datasource or closing it when needed for you.

JdbcHelper class is thread safe. That means you can share the same JdbcHelper instance with many different threads.

=Running Queries=
You can use JdbcHelper to run queries with a single line of code. You can select simple values, create Java objects from resultsets, create list of objects etc. In the examples below we will use a simple java class named User.

{{{
public class User {
   int userId;
   String userName;
   String email;

   public static BeanCreator<User> beanCreator = new BeanCreator<User>() {
       public User createBean(ResultSet rs) throws SQLException {
           User u = new User();
           u.userId = rs.getInt("user_id");
           u.userName = rs.getString("user_name");
           u.email = rs.getString("email");
       }
   };

   public static StatementMapper<User> statementMapper = new StatementMapper<User>() {
       public void mapStatement(PreparedStatement stmt, User u) throws SQLException {
          stmt.setInt(1, u.userId);
          stmt.setString(2, u.userName);
          stmt.setString(3, u.email);
       }
   };
}
}}}

==Querying a simple Object==
{{{
User user = jdbc.queryForObject("select * from users where user_id = ?", User.beanCreator, 100);
}}}

==Querying a list of Objects==
{{{
List<User> users = jdbc.queryForList("select * from users", User.beanCreator);
}}}

==Querying with a custom ResultSetHandler==
{{{
// Process each user record with a ResultSetHandler which has a fetch size of 100
jdbc.query("select * from users", new ResultSetHandler(100) {
    public void processRow(ResultSet rs) throws SQLException {
         // do something with the resultset
    }
});
}}}

Alternatively you can use a ResultSetBeanHandler
{{{
jdbc.query("select * from users", new ResultsetBeanHandler<User>(User.beanCreator) {
    public void processBean(User u) {
         // do something with the User object
    }
});
}}}

==Querying simple values==
{{{
String userName = jdbc.queryForString("select user_name from users where user_id = ?", 100);
}}}

{{{
int userId = jdbc.queryForInt("select user_id from users where user_name = ?", test);
}}}

{{{
Tuple<Integer, String> t = jdbc.queryForTuple("select user_id, user_name from users where email = ?", new IntegerBeanCreator(1), new StringBeanCreator(2), "test@test.com");

int userId = t.getFirst();
String userName = t.getSecond();
}}}

==Custom iteration over ResultSet==
{{{
QueryResult result = jdbc.query("select * from users");
result.setFetchSize(100);
while(result.next()) {
   int userId = result.getInt("user_id");
   String userName = result.getString("user_name");
}
result.close();
}}}

=Executing Statements=
=Transactions=